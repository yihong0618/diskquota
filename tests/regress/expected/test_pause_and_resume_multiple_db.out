-- need 'contrib_regression' as test database
\c
CREATE SCHEMA s1;
SET search_path TO s1;
CREATE DATABASE test_pause_and_resume;
CREATE DATABASE test_new_create_database;
\c test_pause_and_resume
CREATE SCHEMA s1;
CREATE EXTENSION diskquota;
SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

\c contrib_regression
CREATE TABLE s1.a(i int) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO s1.a SELECT generate_series(1,100000); -- expect insert succeed
\c test_pause_and_resume
CREATE TABLE s1.a(i int) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO s1.a SELECT generate_series(1,100000); -- expect insert succeed
\c contrib_regression
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
\c test_pause_and_resume
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
\c contrib_regression
SELECT diskquota.pause(); -- pause extension, onle effect current database
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 's1.a'::regclass AND segid = -1;
 tableid |  size   | segid 
---------+---------+-------
 s1.a    | 3932160 |    -1
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert succeed
\c test_pause_and_resume
SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 's1.a'::regclass AND segid = -1;
 tableid |  size   | segid 
---------+---------+-------
 s1.a    | 3932160 |    -1
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
SELECT diskquota.pause(); -- pause extension, onle effect current database
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

SELECT tableid::regclass, size, segid FROM diskquota.table_size WHERE tableid = 's1.a'::regclass AND segid = -1;
 tableid |  size   | segid 
---------+---------+-------
 s1.a    | 3932160 |    -1
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert succeed
\c test_new_create_database;
CREATE SCHEMA s1;
CREATE EXTENSION diskquota;
SELECT diskquota.wait_for_worker_new_epoch(); -- new database should be active although other database is paused
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

CREATE TABLE s1.a(i int) DISTRIBUTED BY (i);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'i' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
INSERT INTO s1.a SELECT generate_series(1,100000); -- expect insert succeed
SELECT diskquota.set_schema_quota('s1', '1 MB');
 set_schema_quota 
------------------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100000); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
SELECT diskquota.pause(); -- pause extension, onle effect current database
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert succeed
-- resume should onle effect current database
SELECT diskquota.resume();
 resume 
--------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
\c contrib_regression
INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert succeed
SELECT diskquota.resume();
 resume 
--------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

INSERT INTO s1.a SELECT generate_series(1,100); -- expect insert fail
ERROR:  schema's disk space quota exceeded with name: s1
\c test_pause_and_resume
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c test_new_create_database
SELECT diskquota.pause();
 pause 
-------
 
(1 row)

SELECT diskquota.wait_for_worker_new_epoch();
 wait_for_worker_new_epoch 
---------------------------
 t
(1 row)

DROP EXTENSION diskquota;
\c contrib_regression
DROP SCHEMA s1 CASCADE;
NOTICE:  drop cascades to table s1.a
DROP DATABASE test_pause_and_resume;
DROP DATABASE test_new_create_database;
