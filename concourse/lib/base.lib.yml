#@ load("@ytt:data", "data")
#@ load("@ytt:struct", "struct")

#! resources and resource_types could be declared in different data-value files.
#! We check the key prefix, if they are 'resources' and 'resource_types', just
#! merge them into local dictionaries.
#@ resources = []
#@ resource_types = []
#@ data_values_dict = struct.decode(data.values)
#@ for key in data_values_dict.keys():
#@   if key.startswith('resources'):
#@     resources.extend(data_values_dict[key])
#@   end
#@ end
#@ for key in data_values_dict.keys():
#@   if key.startswith('resource_type'):
#@     resource_types.extend(data_values_dict[key])
#@   end
#@ end

#! add_res_by_xxx is to solve the unused resources error for concourse
#@ def add_res_by_conf(res_map, job_conf):
#@   for key in job_conf:
#@     if key.startswith("res_"):
#@       val = job_conf[key]
#@       if type(val) == "list" or type(val) == "yamlfragment":
#@         for res_name in val:
#@           res_map[res_name] = True
#@         end
#@       else:
#@         res_name = val
#@         res_map[res_name] = True
#@       end
#@     end
#@   end
#@ end
#@
#@ def add_res_by_name(res_map, res_name):
#@   res_map[res_name] = True
#@ end
#@
#@ def declare_res(res_type_map, res_map):
#@   for val in resources:
#@     res_name = val["name"]
#@     res_type = val["type"]
#@     if res_map.get(val["name"]):
#@       res_type_map[res_type] = True
  - #@ val
#@     end
#@   end
#@ end
#@
#@ def declare_res_type(res_type_map):
#@   for val in resource_types:
#@     type_name = val["name"]
#@     if res_type_map.get(type_name):
  - #@ val
#@     end
#@   end
#@ end
