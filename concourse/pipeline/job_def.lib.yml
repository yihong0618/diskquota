#@ load("base.lib.yml", "add_res_by_conf", "add_res_by_name")
#@ load("@ytt:template", "template")

#! Job config for centos6
#! Use bin_gpdb_postfix="" to use a release version of gpdb binary
#@ def centos6_gpdb6_conf(release_build=False):
res_build_image: centos6-gpdb6-image-build
res_test_image: centos6-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_centos6" + ("" if release_build else "_debug")
res_diskquota_bin: bin_diskquota_gpdb6_rhel6
res_intermediates_bin: bin_diskquota_gpdb6_rhel6_intermediates
release_bin: bin_diskquota_gpdb6_rhel6_release
os: rhel6
build_type: #@ "Release" if release_build else "Debug"
#@ end

#! Job config for centos7
#@ def centos7_gpdb6_conf(release_build=False):
res_build_image: centos7-gpdb6-image-build
res_test_image: centos7-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_centos7" + ("" if release_build else "_debug")
res_diskquota_bin: bin_diskquota_gpdb6_rhel7
res_intermediates_bin: bin_diskquota_gpdb6_rhel7_intermediates
release_bin: bin_diskquota_gpdb6_rhel7_release
os: rhel7
build_type: #@ "Release" if release_build else "Debug"
#@ end

#! Job config for rhel8
#@ def rhel8_gpdb6_conf(release_build=False):
res_build_image: rhel8-gpdb6-image-build
res_test_image: rhel8-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_rhel8" + ("" if release_build else "_debug")
res_diskquota_bin: bin_diskquota_gpdb6_rhel8
res_intermediates_bin: bin_diskquota_gpdb6_rhel8_intermediates
release_bin: bin_diskquota_gpdb6_rhel8_release
os: rhel8
build_type: #@ "Release" if release_build else "Debug"
#@ end

#! Job config for ubuntu18
#@ def ubuntu18_gpdb6_conf(release_build=False):
res_build_image: ubuntu18-gpdb6-image-build
res_test_image: ubuntu18-gpdb6-image-test
res_gpdb_bin: #@ "bin_gpdb6_ubuntu18" + ("" if release_build else "_debug")
res_diskquota_bin: bin_diskquota_gpdb6_ubuntu18
res_intermediates_bin: bin_diskquota_gpdb6_ubuntu18_intermediates
release_bin: bin_diskquota_gpdb6_ubuntu18_release
os: ubuntu18.04
build_type: #@ "Release" if release_build else "Debug"
#@ end

#! The entry point of a pipeline. The job name must be 'entrance'.
#@ def entrance_job(param):
#@   trigger = param["trigger"]
name: entrance
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- trigger: #@ trigger["auto_trigger"]
  _: #@ template.replace(to_get)
#@   end
#@   for to_put in trigger["to_put_pre"]:
- #@ to_put
#@   end
#@ end

#! Like the entrance_job, with more static checks.
#@ def entrance_check_job(param):
#@   add_res_by_name(param["res_map"], "clang-format-image")
#@   trigger = param["trigger"]
name: entrance
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- trigger: #@ trigger["auto_trigger"]
  _: #@ template.replace(to_get)
#@   end
#@   for to_put in trigger["to_put_pre"]:
- #@ to_put
#@   end
- get: clang-format-image
- task: check_clang_format
  image: clang-format-image
  config:
    inputs:
      - name: diskquota_src
    platform: linux
    run:
      path: diskquota_src/concourse/scripts/check-clang-format.sh
#@ end

#@ def exit_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#@ def exit_pr_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@   end
name: exit_pr
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  trigger: true
  _: #@ template.replace(to_get)
#@   end
#@ end

#! The final release job
#! 1. Push the artifacts to the release bucket
#! 2. Push the git tag
#@ def exit_release_job(param):
#@   trigger = param["trigger"]
#@   confs = param["confs"]
#@   passed_jobs = []
#@   res_map = param["res_map"]
#@   for conf in confs:
#@     passed_jobs.append(build_test_job_name(conf))
#@     add_res_by_name(res_map, conf["release_bin"])
#@   end
name: exit_release
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
on_success: #@ trigger["on_success"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: #@ passed_jobs
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
    steps:
#@   for conf in confs:
      - do:
        - get: #@ conf["res_intermediates_bin"]
          params:
            unpack: true
        - put: #@ conf["release_bin"]
          params:
            file: #@ conf["res_intermediates_bin"] + "/diskquota-*-*.tar.gz"
#@   end
#@   for to_put in trigger["to_put_post"]:
- #@ to_put
#@   end
#@ end

#@ def _build_task(conf):
task: #@ "build_" + conf["os"]
file: diskquota_src/concourse/tasks/build_diskquota.yml
image: #@ conf["res_build_image"]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
params:
  DISKQUOTA_OS: #@ conf["os"]
  BUILD_TYPE: #@ conf["build_type"]
#@ end

#@ def _test_task(conf):
task: #@ "test_" + conf["os"]
timeout: 2h
file: diskquota_src/concourse/tasks/test_diskquota.yml
image: #@ conf["res_test_image"]
input_mapping:
  bin_gpdb: #@ conf["res_gpdb_bin"]
  bin_diskquota: diskquota_artifacts
params:
  DISKQUOTA_OS: #@ conf["os"]
#@ end

#@ def build_test_job_name(conf):
#@   return "build_test_" + conf["os"]
#@ end
#@ def build_test_job(param):
#@   res_map = param["res_map"]
#@   trigger = param["trigger"]
#@   conf = param["conf"]
#@   add_res_by_name(res_map, param["gpdb_src"])
#@   add_res_by_name(res_map, "bin_cmake")
#@   add_res_by_name(res_map, "bin_diskquota_intermediates")
#@   add_res_by_conf(res_map, conf)
name: #@ build_test_job_name(conf)
max_in_flight: 10
on_failure: #@ trigger["on_failure"]
on_error: #@ trigger["on_error"]
plan:
#@   for to_get in trigger["to_get"]:
- passed: [entrance]
  trigger: true
  _: #@ template.replace(to_get)
#@   end
- in_parallel:
  - get: gpdb_src
    resource: #@ param["gpdb_src"]
  - get: bin_cmake
  - get: #@ conf["res_build_image"]
  - get: #@ conf["res_test_image"]
  - get: #@ conf["res_gpdb_bin"]
  - get: last_released_diskquota_bin
    resource: #@ conf["res_diskquota_bin"]
- #@ _build_task(conf)
- #@ _test_task(conf)
- put: #@ conf["res_intermediates_bin"]
  params:
    file: diskquota_artifacts/diskquota.tar.gz
#@ end
